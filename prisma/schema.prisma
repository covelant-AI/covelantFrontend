generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Player {
  id           Int           @id @default(autoincrement())
  firstName    String?
  lastName     String?
  email        String
  avatar       String?
  age          Int?
  dominantHand String?       @default("Right Handed")
  height       Int?          @default(180)
  winRate      Float?        @default(1)
  priceId      String?       @default("Free")
  customerId   String?
  credits      Int?          @default(100) 
  stats        PlayerStat[]

  playerMatchesFirst  PlayerMatch[] @relation("PlayerMatch_First")
  playerMatchesSecond PlayerMatch[] @relation("PlayerMatch_Second")
  coaches             Coach[]       @relation("CoachPlayers")
  overallStats        OverallStats?

  scorePoints  ScorePoint[]
  matchMetrics MatchMetric[]
}

model Coach {
  id        Int      @id @default(autoincrement())
  firstName String
  lastName  String
  avatar    String?
  email     String
  team      String?
  age       Int?
  priceId   String?       @default("Free")
  customerId String?
  credits      Int?          @default(200)  

  players   Player[] @relation("CoachPlayers")
}

model PlayerStat {
  id        Int     @id @default(autoincrement())
  subject   String
  value     Int
  playerId  Int
  player    Player  @relation(fields: [playerId], references: [id])

  @@index([playerId])
}

model OverallStats {
  id               Int     @id @default(autoincrement())
  wins             Int     @default(0)
  losses           Int     @default(0)
  setsWon          Int     @default(0)
  setsLost         Int     @default(0)
  totalMatches     Int     @default(0)
  avgMatchDuration Float   @default(0)

  playerId         Int     @unique
  player           Player  @relation(fields: [playerId], references: [id])
}

model Match {
  id            Int           @id @default(autoincrement())
  videoUrl      String?
  imageUrl      String?
  type          String?
  fps           Int?
  width         Int?
  height        Int?
  totalFrames   Int? 
  result        String?
  fieldType     String?
  status        String?
  date          DateTime
  videoType     String
  playerMatches PlayerMatch[]

  events        MatchEvent[]

  scorePoints   ScorePoint[]
  matchMetrics  MatchMetric[]
  videoSections VideoSection[]
  ballDetections BallDetection[]
  playerDetection PlayerDetection[]
  courtKeypoint  CourtKeypoint[]
}

model PlayerDetection {
  id        Int      @id @default(autoincrement())
  match     Match    @relation(fields: [matchId], references: [id])
  matchId   Int
  payload   Json
  createdAt DateTime @default(now())

  @@index([matchId])
}


model CourtKeypoint {
  id        Int      @id @default(autoincrement())
  match     Match    @relation(fields: [matchId], references: [id])
  matchId   Int
  payload   Json
  createdAt DateTime @default(now())

  @@index([matchId])
}



model BallDetection {
  id        Int      @id @default(autoincrement())
  match     Match    @relation(fields: [matchId], references: [id])
  matchId   Int
  payload   Json
  createdAt DateTime @default(now())

  @@index([matchId])
}

model VideoSection {
  id         Int     @id @default(autoincrement())
  match      Match   @relation(fields: [matchId], references: [id])
  matchId    Int
  startIndex Int
  startTime  Float
  endIndex   Int
  endTime    Float

  @@index([matchId])
  @@unique([matchId, startIndex, endIndex], name: "unique_section_per_match")
}

model StatMatch {
  id        Int    @id @default(autoincrement())
  condition String?
}

model Opponent {
  id            Int           @id @default(autoincrement())
  firstName     String
  lastName      String
  playerMatches PlayerMatch[]
  scorePoints   ScorePoint[]
}

model PlayerMatch {
  id           Int       @id @default(autoincrement())
  matchId      Int
  result       String
  match        Match     @relation(fields: [matchId], references: [id])

  playerId     Int?
  player       Player?   @relation("PlayerMatch_First", fields: [playerId], references: [id])

  playerTwoId  Int?
  playerTwo    Player?   @relation("PlayerMatch_Second", fields: [playerTwoId], references: [id])

  opponentId   Int?
  opponent     Opponent? @relation(fields: [opponentId], references: [id])

  @@unique([matchId, playerId, playerTwoId])
  @@unique([matchId, playerId, opponentId])
}

/// Event categories
enum EventCategory {
  MATCH
  TACTIC
  FOULS
  PHYSICAL
  NOTE
}

/// MATCH event types
enum MatchEventType {
  FIRST_SERVE
  SECOND_SERVE
  BREAK_POINT
  GAME_POINT
  SET_POINT
  TIEBREAK
  START_OF_SET
}

/// TACTIC event types
enum TacticEventType {
  SERVE_VOLLEY
  BASELINE_RALLY
  DROP_SHOT
  NET_PLAY
  CROSS_COURT_RALLY
  DOWN_THE_LINE_SHOT
  OPPONENT_PULLED_WIDE
  RETURN
}

/// FOULS event types
enum FoulsEventType {
  UNFORCED_ERROR
  FORCED_ERROR
  DOUBLE_FAULT
  FOOT_FAULT
  NET_TOUCH
  RACKET_VIOLATION
}

/// PHYSICAL event types
enum PhysicalEventType {
  FATIGUE_SIGN
  SLOW_RECOVERY
  INJURY_CONCERN
  GOOD_MOVEMENT
  POOR_FOOTWORK
}

/// Shared condition across all categories
enum ConditionType {
  UNDER_PRESSURE
  CONFIDENT
  FOCUSED
  LOST_FOCUS
  MOMENTUM_SHIFT
  CLUTCH_PLAY
  FATIGUE_SIGNS
}

/// Points scored in matches
model ScorePoint {
  id               Int       @id @default(autoincrement())
  matchId          Int
  match            Match     @relation(fields: [matchId], references: [id])
  playerId         Int?
  player           Player?   @relation(fields: [playerId], references: [id])
  opponentId       Int?
  opponent         Opponent? @relation(fields: [opponentId], references: [id])
  setNumber        Int
  gamePoint        Int       @default(0)
  matchPoint       Int       @default(0)
  eventTimeSeconds Int
  createdAt        DateTime  @default(now())

  @@index([matchId])
  @@index([playerId])
  @@index([opponentId])
}

model MatchMetric {
  id               Int        @id @default(autoincrement())
  matchId          Int
  match            Match      @relation(fields: [matchId], references: [id])
  playerId         Int?
  player           Player?    @relation(fields: [playerId], references: [id])
  metricType       MetricType
  value            Float
  eventTimeSeconds Int
  createdAt        DateTime   @default(now())

  @@index([matchId])
  @@index([playerId])
  @@index([metricType])
}

enum MetricType {
  BALL_SPEED
  PLAYER_SPEED
  LONGEST_RALLY
  STRIKES_EFF
  NOTE
}

/// Unified event table
model MatchEvent {
  id               Int               @id @default(autoincrement())
  matchId          Int
  match            Match             @relation(fields: [matchId], references: [id])
  category         EventCategory
  comment          String?

  // MATCH
  matchType        MatchEventType?
  // TACTIC
  tacticType       TacticEventType?
  // FOULS
  foulType         FoulsEventType?
  // PHYSICAL
  physicalType     PhysicalEventType?
  // NOTE
  noteType         String?

  // Shared condition across all categories
  condition        ConditionType?
  customCondition  String?  @default("")

  eventTimeSeconds Float
  createdAt        DateTime          @default(now())

  @@index([matchId, category])
}








