generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Player {
  id           Int      @id @default(autoincrement())
  firstName    String?
  lastName     String?
  email        String
  avatar       String?
  age          Int?
  dominantHand String?  @default("Right Handed")
  height       Int?     @default(180)
  Tier         String?  @default("Professional")
  winRate      Float?
  stats        PlayerStat[]

  // break out the two “slots” of PlayerMatch
  playerMatchesFirst  PlayerMatch[] @relation("PlayerMatch_First")
  playerMatchesSecond PlayerMatch[] @relation("PlayerMatch_Second")

  coaches      Coach[]  @relation("CoachPlayers")
}

model Coach {
  id        Int      @id @default(autoincrement())
  firstName String
  lastName  String
  avatar    String?
  email     String
  team      String?
  age       String?

  players   Player[] @relation("CoachPlayers")
}

model PlayerStat {
  id        Int     @id @default(autoincrement())
  subject   String
  value     Int
  playerId  Int
  player    Player  @relation(fields: [playerId], references: [id])
}

model Match {
  id            Int           @id @default(autoincrement())
  videoUrl      String?
  imageUrl      String?
  type          String?
  result        String?
  fieldType     String?
  date          DateTime
  videoType     String
  playerMatches PlayerMatch[]
}

model Opponent {
  id            Int           @id @default(autoincrement())
  firstName     String
  lastName      String
  playerMatches PlayerMatch[]
}

model PlayerMatch {
  id           Int       @id @default(autoincrement())
  matchId      Int
  result       String
  match        Match     @relation(fields: [matchId], references: [id])

  // First player slot
  playerId     Int?
  player       Player?   @relation("PlayerMatch_First", fields: [playerId], references: [id])

  // Second player slot (for player-vs-player)
  playerTwoId  Int?
  playerTwo    Player?   @relation("PlayerMatch_Second", fields: [playerTwoId], references: [id])

  // Opponent slot (for player-vs-opponent)
  opponentId   Int?
  opponent     Opponent? @relation(fields: [opponentId], references: [id])

  /// Enforce uniqueness per “mode”:
  @@unique([matchId, playerId, playerTwoId])   // no two identical P-vs-P rows
  @@unique([matchId, playerId, opponentId])    // no two identical P-vs-O rows
}





